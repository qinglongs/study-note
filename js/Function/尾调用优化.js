/*
 * @Description: In User Settings Edit
 * @Author: your name
 * @Date: 2019-09-19 14:55:41
 * @LastEditTime: 2019-09-19 15:26:00
 * @LastEditors: Please set LastEditors
 */
/**
 * 什么是尾调用：
 * 尾调用是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚
 * **就是值某个函数的最后异步是调用另一个函数**
 * **目前只有safari浏览器支持尾调用优化，chrome和firefox都不支持**
 */

//下面代码中，函数f的最后一步是调用函数g，这就叫做尾调用。
function f(x) {
  return g(x);
}

//以下三种情况都不属于尾调用：

function f(x) {
  let y = g(x);//调用后还有赋值操作
  return y;
}

function f(x) {
  return g(x) + 1; //调用后还有操作
}

function f(x) {
  g(x);
}

/**
 * 上面代码中，情况一是调用函数g之后，还有赋值的操作，所以不属于尾调用，即使
 * 语义完全一样。情况二也属于调用后还有操作，即使写在一行内。情况三等同于下面代码：
 */

function f(x) {
  g(x);
  return undefined;
}

/**
 * **尾调用不一定出现在函数尾部，只要最后一步操作即可**
 * 下面代码中，函数m和函数n都属于尾调用，因为它们都是函数f的最后一部操作
 */

function f(x) {
  if (x > 0) {
    return m(x);
  }
  return n(x);
}

/**
 * **尾调用优化**
 */

/**
 * 尾调用之所以与其他调用不同，就在于它的特殊的调用位置
 * 
 * 我们知道，函数调用会在内形成一个"调用记录",又称"调用帧"(call frame)，保存
 * 调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上面，还会形成一个
 * B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果B内部还调用函数C，那就还有一个
 * C的调用帧，以此类推，所有的调用帧，就形成一个"调用栈"(call stack)
 * 
 * 尾调用由于是函数的最后一部操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息
 * 都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。
 */

function f() {
  let m = 1;
  let n = 2;
  return g(m + n);
}

f();
//等同于

function f() {
  return g(3);
}

//等同于
g(3)

/**
 * 上面代码中，如果函数g不是尾调用，函数f就需要保存内部变量的m和n的值、g的调用位置等信息。
 * 但由于调用g之后，函数f就结束了，所以执行到最后一步，完全可以删除f(x)的调用帧，只保留g(3)的调用帧
 * **只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行"尾调用优化"**
 */

function addOne(a) {
  var one = 1;
  function inner(b) {
    return b + one;
  }
  return inner(a);
}